c
user = User.find_by(email: params[:email])
params
parmas
user
c
status.message
status
c
current_user
c
current_user
c
signed_out = (Devise.sign_out_all_scopes ? sign_out : sign_out(user))
user = User.find(id)
id = a[0]["sub"]
a[0]["sub"]
a[0]
user = User.find(a[0].sub)
a = JWT.decode token, nil, false
JWT.decode token, nil, false
token = request.headers['Authorization'].split(' ')[1]
c
Devise::JWT.config
Warden::JWTAuth.config
JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials[:secret_key_base])
Rails.application.credentials[:secret_key_base]
Rails.application.credentials[:secret_key_base]).first
request.headers['Authorization'].split(' ')[1]
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1], Rails.application.credentials[:secret_key_base]).first
c
super
c
current_user
c
super
current_user
c
current_user
c
current_user
c
params[:token].split(" ")[1]
params[:token].split(" ")[0]
params[:token]
paparparams[:token]
paparams[]:token
params
c
request.headers.content-typec
request.headers.content-type
request.headers
request
res
request.hres
request.headers
params
pparams
current_user
c
current_user
resource
c
resource
c
resource
c
params
c
resource
c
resource
c
params
c
params
c
super
params
c
current_user
c
current_user
c
current_user
c
request.headers['Authorization'].split(' ')[1]
c
jwt_payload['sub']
c
Rails.application.credentials.devise[:jwt_secret_key]
c
current_user
c
current_user
c
params
Devise::JWT.config
Warden::JWTAuth.config
JWT.decode(request.headers['Authorization'].split(' ')[1],Rails.application.credentials[:secret_key_base]).first
Rails.application.credentials[:secret_key_base]
request.headers['Authorization'].split(' ')[1]
c
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ')[1]
c
current_user
cu
c
current_user
c
params
paa
c
params["user"]["email"]
user["email"]
user[:email]
params
user_params
